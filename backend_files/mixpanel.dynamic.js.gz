window['mixpanelDeps'] = ["/integrations/vendor/commons.f239a60eb1c0d6ae5bde.js"];window['mixpanelLoader'] = function() { return window["mixpanelIntegration"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"mixpanel": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp_name_Integration"] = window["webpackJsonp_name_Integration"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["37ZO","commons"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "37ZO":
/*!********************************************!*\
  !*** ./integrations/mixpanel/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Module dependencies.
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var alias = __webpack_require__(/*! @segment/alias */ "U023");

var dates = __webpack_require__(/*! @segment/convert-dates */ "OO3c");

var del = __webpack_require__(/*! obj-case */ "WiAo").del;

var includes = __webpack_require__(/*! @ndhoule/includes */ "Vqqq");

var integration = __webpack_require__(/*! @segment/analytics.js-integration */ "hjHq");

var iso = __webpack_require__(/*! @segment/to-iso-string */ "+BL1");

var pick = __webpack_require__(/*! @ndhoule/pick */ "wZBr");

var is = __webpack_require__(/*! is */ "qMUi");

var indexOf = __webpack_require__(/*! component-indexof */ "zs13");
/**
 * Expose `Mixpanel` integration.
 */


var Mixpanel = module.exports = integration('Mixpanel').global('mixpanel').option('eventIncrements', []).option('propIncrements', []).option('peopleProperties', []).option('superProperties', []).option('cookieName', '').option('crossSubdomainCookie', false).option('secureCookie', false).option('persistence', 'cookie').option('nameTag', true).option('pageview', false).option('people', false).option('token', '').option('setAllTraitsByDefault', true).option('consolidatedPageCalls', true).option('trackAllPages', false).option('trackNamedPages', false).option('trackCategorizedPages', false).option('groupIdentifierTraits', []).option('sourceName', '').option('enableEuropeanUnionEndpoint', false).tag('<script src="//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js">');
/**
 * Options aliases.
 */

var optionsAliases = {
  cookieName: 'cookie_name',
  crossSubdomainCookie: 'cross_subdomain_cookie',
  secureCookie: 'secure_cookie'
};
/**
 * Initialize.
 *
 * https://mixpanel.com/help/reference/javascript#installing
 * https://mixpanel.com/help/reference/javascript-full-api-reference#mixpanel.init
 *
 * @api public
 */

Mixpanel.prototype.initialize = function () {
  /* eslint-disable */
  (function (e, a) {
    if (!a.__SV) {
      var b = window;

      try {
        var c,
            l,
            i,
            j = b.location,
            g = j.hash;

        c = function c(a, b) {
          return (l = a.match(RegExp(b + "=([^&]*)"))) ? l[1] : null;
        };

        g && c(g, "state") && (i = JSON.parse(decodeURIComponent(c(g, "state"))), "mpeditor" === i.action && (b.sessionStorage.setItem("_mpcehash", g), history.replaceState(i.desiredHash || "", e.title, j.pathname + j.search)));
      } catch (m) {}

      var k, h;
      window.mixpanel = a;
      a._i = [];

      a.init = function (b, c, f) {
        function e(b, a) {
          var c = a.split(".");
          2 == c.length && (b = b[c[0]], a = c[1]);

          b[a] = function () {
            b.push([a].concat(Array.prototype.slice.call(arguments, 0)));
          };
        }

        var d = a;
        "undefined" !== typeof f ? d = a[f] = [] : f = "mixpanel";
        d.people = d.people || [];

        d.toString = function (b) {
          var a = "mixpanel";
          "mixpanel" !== f && (a += "." + f);
          b || (a += " (stub)");
          return a;
        };

        d.people.toString = function () {
          return d.toString(1) + ".people (stub)";
        };

        k = "disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");

        for (h = 0; h < k.length; h++) {
          e(d, k[h]);
        }

        a._i.push([b, c, f]);
      };

      a.__SV = 1.2;
    }
  })(document, window.mixpanel || []);
  /* eslint-enable */


  this.options.eventIncrements = lowercase(this.options.eventIncrements);
  this.options.propIncrements = lowercase(this.options.propIncrements);
  var options = alias(this.options, optionsAliases);

  if (this.options.enableEuropeanUnionEndpoint) {
    // https://developer.mixpanel.com/docs/implement-mixpanel#section-implementing-mixpanel-in-the-european-union-eu
    options.api_host = 'https://api-eu.mixpanel.com';
  } // tag ajs requests with Segment by request from Mixpanel team for better mutual debugging


  options.loaded = function (mixpanel) {
    mixpanel.register({
      mp_lib: 'Segment: web'
    });
  };

  window.mixpanel.init(options.token, options);
  this.load(this.ready);
};
/**
 * Loaded?
 *
 * @api private
 * @return {boolean}
 */


Mixpanel.prototype.loaded = function () {
  return !!(window.mixpanel && window.mixpanel.config);
};
/**
 * Page.
 *
 * https://mixpanel.com/help/reference/javascript-full-api-reference#mixpanel.track_pageview
 *
 * @api public
 * @param {Page} page
 */


Mixpanel.prototype.page = function (page) {
  var category = page.category();
  var name = page.name();
  var opts = this.options; // consolidated Page Calls

  if (opts.consolidatedPageCalls) {
    this.track(page.track());
    return;
  } // all pages


  if (opts.trackAllPages) {
    this.track(page.track());
    return;
  } // categorized pages


  if (opts.trackCategorizedPages && category) {
    // If this option is checked and name was also passed, used the full name which includes both category & name
    if (name) {
      this.track(page.track(page.fullName()));
      return;
    }

    this.track(page.track(category));
    return;
  } // named pages


  if (name && opts.trackNamedPages) {
    this.track(page.track(name));
  }
};
/**
 * Trait aliases.
 */


var traitAliases = {
  created: '$created',
  email: '$email',
  firstName: '$first_name',
  lastName: '$last_name',
  lastSeen: '$last_seen',
  name: '$name',
  username: '$username',
  phone: '$phone'
};
/**
 * Identify.
 *
 * https://mixpanel.com/help/reference/javascript#super-properties
 * https://mixpanel.com/help/reference/javascript#user-identity
 * https://mixpanel.com/help/reference/javascript#storing-user-profiles
 *
 * @api public
 * @param {Identify} identify
 */

Mixpanel.prototype.identify = function (identify) {
  var username = identify.username();
  var email = identify.email();
  var id = identify.userId();
  var setAllTraitsByDefault = this.options.setAllTraitsByDefault;
  var people = this.options.people;
  var peopleProperties = extendTraits(this.options.peopleProperties);
  var superProperties = this.options.superProperties; // id

  if (id) window.mixpanel.identify(id); // name tag

  var nametag = email || username || id;
  if (nametag) window.mixpanel.name_tag(nametag);
  var traits = identify.traits(traitAliases);
  if (traits.$created) del(traits, 'createdAt');
  traits = dates(traits, iso); // determine which traits to union to existing properties and which to set as new properties

  var traitsToUnion = {};
  var traitsToSet = {};

  for (var key in traits) {
    if (!traits.hasOwnProperty(key)) continue;
    var trait = traits[key];

    if (Array.isArray(trait) && trait.length > 0) {
      traitsToUnion[key] = trait; // since mixpanel doesn't offer a union method for super properties we have to do it manually by retrieving the existing list super property
      // from mixpanel and manually unioning to it ourselves

      var existingTrait = window.mixpanel.get_property(key);

      if (existingTrait && Array.isArray(existingTrait)) {
        traits[key] = unionArrays(existingTrait, trait);
      }
    } else {
      traitsToSet[key] = trait;
    }
  }

  if (setAllTraitsByDefault) {
    window.mixpanel.register(traits);

    if (people) {
      window.mixpanel.people.set(traitsToSet);
      window.mixpanel.people.union(traitsToUnion);
    }
  } else {
    // explicitly set select traits as people and super properties
    var mappedSuperProps = mapTraits(superProperties);
    var superProps = pick(mappedSuperProps || [], traits);
    if (!is.empty(superProps)) window.mixpanel.register(superProps);

    if (people) {
      var mappedPeopleProps = mapTraits(peopleProperties);
      var peoplePropsToSet = pick(mappedPeopleProps || [], traitsToSet);
      var peoplePropsToUnion = pick(mappedPeopleProps || [], traitsToUnion);
      if (!is.empty(peoplePropsToSet)) window.mixpanel.people.set(peoplePropsToSet);
      if (!is.empty(peoplePropsToUnion)) window.mixpanel.people.union(peoplePropsToUnion);
    }
  }
};
/**
 * Track.
 *
 * https://mixpanel.com/help/reference/javascript#sending-events
 * https://mixpanel.com/help/reference/javascript#tracking-revenue
 *
 * @api public
 * @param {Track} track
 */


Mixpanel.prototype.track = function (track) {
  var eventIncrements = this.options.eventIncrements || this.options.increments; // TODO: remove settings.increments check, it's only here as we cutover from increments to eventIncrements

  var propIncrements = this.options.propIncrements;
  var eventLowercase = track.event().toLowerCase();
  var people = this.options.people;
  var props = track.properties();
  var revenue = track.revenue(); // Don't map traits, clients should use identify instead.

  var superProps = pick(this.options.superProperties, props);
  var sourceName = this.options.sourceName;
  if (sourceName) props.segment_source_name = sourceName; // delete mixpanel's reserved properties, so they don't conflict

  delete props.distinct_id;
  delete props.ip;
  delete props.mp_name_tag;
  delete props.mp_note;
  delete props.token;
  props = dates(props, iso);
  invertObjectArrays(props); // Mixpanel People operations

  if (people) {
    // increment event count
    if (includes(eventLowercase, eventIncrements)) {
      window.mixpanel.people.increment(track.event());
      window.mixpanel.people.set('Last ' + track.event(), new Date());
    } // increment property counts


    for (var key in props) {
      if (!Object.prototype.hasOwnProperty.call(props, key)) {
        continue;
      }

      var prop = props[key];

      if (includes(key.toLowerCase(), propIncrements)) {
        window.mixpanel.people.increment(key, prop);
      }
    } // track revenue


    if (revenue) {
      window.mixpanel.people.track_charge(revenue);
    }
  } // track the event


  var query;

  if (props.link_query) {
    query = props.link_query; // DOM query

    delete props.link_query;
    window.mixpanel.track_links(query, track.event(), props);
  } else if (props.form_query) {
    // DOM query
    query = props.form_query;
    delete props.form_query;
    window.mixpanel.track_forms(query, track.event(), props);
  } else {
    window.mixpanel.track(track.event(), props);
  } // register super properties if present in context.mixpanel.superProperties


  if (!is.empty(superProps)) {
    window.mixpanel.register(superProps);
  }
};
/**
 * Alias.
 *
 * https://mixpanel.com/help/reference/javascript#user-identity
 * https://mixpanel.com/help/reference/javascript-full-api-reference#mixpanel.alias
 *
 * @api public
 * @param {Alias} alias
 */


Mixpanel.prototype.alias = function (alias) {
  var mp = window.mixpanel;
  var to = alias.to();
  if (mp.get_distinct_id && mp.get_distinct_id() === to) return; // HACK: internal mixpanel API to ensure we don't overwrite

  if (mp.get_property && mp.get_property('$people_distinct_id') === to) return; // although undocumented, mixpanel takes an optional original id

  mp.alias(to, alias.from());
};
/**
 *
 * @param {Group} group
 */


Mixpanel.prototype.group = function (group) {
  var groupIdentifierTraits = this.options.groupIdentifierTraits;
  var groupId = group.groupId();
  var userId = this.analytics.user().id();
  var traits = group.properties();

  if (!groupId || !userId || !groupIdentifierTraits.length) {
    return;
  }

  if (traits && Object.keys(traits).length) {
    for (var ind = 0; ind < groupIdentifierTraits.length; ind++) {
      window.mixpanel.get_group(groupIdentifierTraits[ind], groupId).set_once(traits);
    }
  }

  for (var i = 0; i < groupIdentifierTraits.length; i++) {
    window.mixpanel.set_group(groupIdentifierTraits[i], [groupId]);
  }
};
/**
 * Lowercase the given `arr`.
 *
 * @api private
 * @param {Array} arr
 * @return {Array}
 */


function lowercase(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < arr.length; ++i) {
    ret[i] = String(arr[i]).toLowerCase();
  }

  return ret;
}
/**
 * Map Special traits in the given `arr`.
 * From the TraitAliases for Mixpanel's special props
 *
 * @api private
 * @param {Array} arr
 * @return {Array}
 */


function mapTraits(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < arr.length; ++i) {
    if (traitAliases.hasOwnProperty(arr[i])) {
      ret.push(traitAliases[arr[i]]);
    } else {
      ret.push(arr[i]);
    }
  }

  return ret;
}
/**
 * extend Mixpanel's special trait keys in the given `arr`.
 *
 * @api private
 * @param {Array} arr
 * @return {Array}
 */


function extendTraits(arr) {
  var keys = [];

  for (var key in traitAliases) {
    if (traitAliases.hasOwnProperty(key)) {
      keys.push(key);
    }
  }

  for (var i = 0; i < keys.length; ++i) {
    if (indexOf(arr, keys[i]) < 0) {
      arr.push(keys[i]);
    }
  }

  return arr;
}
/**
 * Since Mixpanel doesn't support lists of objects, invert each list of objects to a set of lists of object properties.
 * Treats list transformation atomically, e.g. will only transform if EVERY item in list is an object
 *
 * @api private
 * @param {Object} props
 * @example
 * input: {products: [{sku: 32, revenue: 99}, {sku:2, revenue: 103}]}
 * output: {products_skus: [32, 2], products_revenues: [99, 103]}
 */


function invertObjectArrays(props) {
  var properties = props;

  for (var propName in properties) {
    // eslint-disable-line
    var propValue = properties[propName];

    if (!properties.hasOwnProperty(propName) || !Array.isArray(propValue)) {
      continue;
    }

    var invertedArrays = invertObjectArray(propName, propValue);

    if (Object.keys(invertedArrays).length !== 0) {
      // make sure obj isn't empty
      mergeArraysIntoObj(properties, invertedArrays);
      delete properties[propName];
    }
  }
} // Example:
// input: 'products', [{sku: 32, revenue: 99}, {sku:2, revenue: 103}]
// output: {products_skus: [32, 2], products_revenues: [99, 103]}


function invertObjectArray(propName, arr) {
  var invertedArrays = {}; // invert object lists and collect into invertedLists

  for (var i = 0; i < arr.length; i++) {
    var elem = arr[i]; // abort operation if non-object encountered in array

    if (_typeof(elem) !== 'object') {
      return {};
    }

    for (var key in elem) {
      if (!elem.hasOwnProperty(key)) {
        continue;
      }

      var attrKey = propName + '_' + key + 's'; // e.g. products_skus
      // append to list if it exists or create new one if not

      if (attrKey in invertedArrays) {
        invertedArrays[attrKey].push(elem[key]);
      } else {
        invertedArrays[attrKey] = [elem[key]];
      }
    }
  }

  return invertedArrays;
}

function mergeArraysIntoObj(destination, source) {
  var d = destination;

  for (var arrayName in source) {
    if (source.hasOwnProperty(arrayName)) {
      var arr = source[arrayName];
      d[arrayName] = arrayName in d ? d[arrayName].concat(arr) : arr;
    }
  }
}
/**
 * Return union of two arrays
 * Pulled from https://stackoverflow.com/a/3629861
 *
 * @param {Array} x
 * @param {Array} y
 * @return {Array} res
 * @api private
 */


function unionArrays(x, y) {
  var obj = {}; // store items of each array as keys/values of obj, implicitly overwriting duplicates

  var i;

  for (i = 0; i < x.length; i++) {
    obj[x[i]] = x[i];
  }

  for (i = 0; i < y.length; i++) {
    obj[y[i]] = y[i];
  }

  return Object.keys(obj);
}

/***/ }),

/***/ "zs13":
/*!*************************************************!*\
  !*** ./node_modules/component-indexof/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(arr, obj){
  if (arr.indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ })

/******/ });
//# sourceMappingURL=mixpanel.js.map
};